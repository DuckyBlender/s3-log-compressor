name: Build and Release Lambda

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: aarch64-unknown-linux-gnu
        
    - name: Add cargo bin to PATH
      run: |
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        export PATH="$HOME/.cargo/bin:$PATH"
        
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          rust-compressor/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Install Homebrew
      run: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        echo "/home/linuxbrew/.linuxbrew/bin" >> $GITHUB_PATH
        export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
        
    - name: Install cargo-lambda with Homebrew
      run: |
        # Install cargo-lambda (includes Zig dependency)
        brew install cargo-lambda/tap/cargo-lambda
        
        # Verify installation
        cargo lambda --version
        
    - name: Build Lambda function
      run: |
        cd rust-compressor
        cargo lambda build --release --arm64
        
    - name: Create deployment package
      run: |
        # Verify the build output exists
        ls -la rust-compressor/target/lambda/
        ls -la rust-compressor/target/lambda/rust-compressor/
        
        # Create the zip package
        cd rust-compressor/target/lambda/rust-compressor
        zip -r ../../../../s3-log-compressor.zip bootstrap
        
        # Verify the zip was created
        ls -la ../../../../s3-log-compressor.zip
        
    - name: Get commit SHA (short)
      id: get_sha
      run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
    - name: Get timestamp
      id: get_timestamp
      run: echo "timestamp=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
      
    - name: Create Release
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: release-${{ steps.get_timestamp.outputs.timestamp }}-${{ steps.get_sha.outputs.short_sha }}
        name: S3 Log Compressor ${{ steps.get_timestamp.outputs.timestamp }}
        body: |
          Automated release of S3 Log Compressor Lambda function
          
          **Commit:** ${{ github.sha }}
          **Built on:** ${{ steps.get_timestamp.outputs.timestamp }}
          
          This release contains the compiled Lambda function ready for deployment.
          
          ### Changes in this release:
          - Built from commit: ${{ github.sha }}
          - Binary compiled for ARM64 architecture
          - Optimized release build
        files: |
          s3-log-compressor.zip
        draft: false
        prerelease: false
        
    - name: Build complete
      run: |
        echo "Build completed successfully!"
        echo "Zip file created: s3-log-compressor.zip"
        if [ "${{ github.event_name }}" == "push" ] && ([ "${{ github.ref }}" == "refs/heads/main" ] || [ "${{ github.ref }}" == "refs/heads/master" ]); then
          echo "Release will be created for this push to main/master"
        else
          echo "No release created - this is either a PR or not on main/master branch"
        fi
